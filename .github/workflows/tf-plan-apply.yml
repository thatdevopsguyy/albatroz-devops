name: 'Terraform Plan/Apply'

on:
  workflow_dispatch:
  push:
    branches:
    - main
    - master
    paths:
    - 'terraform/*.tf'
  pull_request:
    branches:
    - main
    - master
    paths:
    - 'terraform/*.tf'

# Special permissions required for OIDC authentication
permissions:
  id-token: write
  contents: read
  pull-requests: write

# These environment variables are used by the terraform azure provider to setup OIDD authenticate. 
env:
  TF_VAR_location: "brazilsouth"
  TF_VAR_resource_group_name: "AlbatrozMGA"
  TF_VAR_vm_size_staging: "Standard_B2s"
  TF_VAR_vm_size_production: "Standard_B2ms"
  TF_VAR_ubuntu_image: "20_04-lts-gen2"
  TF_VAR_vnet_name: "albatroz-vnet"
  TF_VAR_subnet_name_staging: "albatroz-subnet-staging"
  TF_VAR_subnet_name_production: "albatroz-subnet-production"
  TF_VAR_storage_account_name: "albatrozsa"
  TF_VAR_storage_container_name_prod: "albatrozsc-prod"
  TF_VAR_storage_container_name_stage: "albatrozsc-stage"
  TF_VAR_vm_production_name: "albatroz-production"
  TF_VAR_vm_stage_name: "albatroz-homolog"
  TF_VAR_admin_username: "azureuser"
  TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
  TF_VAR_sql_server_admin_password: ${{ secrets.SQL_SERVER_ADMIN_PASSWORD }}
  TF_VAR_sql_administrator_login: "albatrozadmin"
  TF_VAR_container_registry_name: "albatrozcr"
  TF_VAR_sql_server_version: "8.0"
  TF_VAR_sql_database_size: "128"
  TF_VAR_database_name: "albatroz_db_prod"
  TF_VAR_sql_server_backup_retention_days: "7"
  TF_VAR_ssl_enforcement_enabled: "false"
  TF_VAR_sql_server_compute_type: "GP_Standard_D2ds_v4"
  TF_VAR_sql_server_name: "albatroz-prod-flex-mysql"

jobs:
  terraform-plan:
    name: 'Terraform Plan'
    runs-on: self-hosted
    env:
      # This is needed since we are running terraform with read-only permissions
      ARM_SKIP_PROVIDER_REGISTRATION: true
    outputs:
      tfplanExitCode: ${{ steps.tf-plan.outputs.exitcode }}

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of the Terraform CLI
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_wrapper: false

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    # Checks that all Terraform configuration files adhere to a canonical format
    # Will fail the build if not
    - name: Terraform Format
      run: terraform fmt
      working-directory: terraform

    # Generates an execution plan for Terraform
    # An exit code of 0 indicates no changes, 1 a Terraform failure, 2 there are pending changes.
    - name: Terraform Plan
      id: tf-plan
      run: |
        export exitcode=0
        terraform plan -detailed-exitcode -no-color -out tfplan || export exitcode=$?

        echo "exitcode=$exitcode" >> $GITHUB_OUTPUT

        if [ $exitcode -eq 1 ]; then
          echo Terraform Plan Failed!
          exit 1
        else
          exit 0
        fi
      working-directory: terraform

    # Save plan to artifacts
    - name: Publish Terraform Plan
      uses: actions/upload-artifact@v3
      with:
        name: tfplan
        path: terraform/tfplan

    # Create string output of Terraform Plan
    - name: Create String Output
      id: tf-plan-string
      run: |
        TERRAFORM_PLAN=$(terraform show -no-color tfplan)

        delimiter="$(openssl rand -hex 8)"
        echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
        echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
        echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo '```terraform' >> $GITHUB_OUTPUT
        echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
        echo '```' >> $GITHUB_OUTPUT
        echo "</details>" >> $GITHUB_OUTPUT
        echo "${delimiter}" >> $GITHUB_OUTPUT
      working-directory: terraform

    # Publish Terraform Plan as task summary
    - name: Publish Terraform Plan to Task Summary
      env:
        SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
      run: |
        echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY
      working-directory: terraform

  terraform-apply:
    name: 'Terraform Apply'
    if: (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master') && needs.terraform-plan.outputs.tfplanExitCode == 2
    runs-on: self-hosted
    environment: production
    needs: [terraform-plan]
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    # Download saved plan from artifacts
    - name: Download Terraform Plan
      uses: actions/download-artifact@v3
      with:
        name: tfplan
        path: terraform
    # Terraform Apply
    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan
      working-directory: terraform
