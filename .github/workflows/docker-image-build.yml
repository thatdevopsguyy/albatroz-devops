name: Docker Image CI

on:
  push:
    branches:
      - dev
      - stage
      - main
      - master
  pull_request:
    types:
      - opened
      - synchronize    
  repository_dispatch:
    types: [build]
  workflow_dispatch:
    inputs:
      image:
        description: 'Which image to build (all, backend_code, frontend_code, nginx, nginx-proxy, letsencrypt)'
        required: true
        default: 'all'

jobs:
  setup:
    runs-on: self-hosted
    outputs:
      completed: ${{ steps.increment_completed.outputs.completed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          repository: 'thatdevopsguyy/albatroz-admin-angular-node'
          ref: ${{ github.event.client_payload.sha || github.ref }}

      - name: Determine completed flag
        id: increment_completed
        run: echo "::set-output name=completed::$((${{ needs.setup.outputs.completed }} + 1))"

      - name: Determine image tag
        id: determine_image_tag
        run: |
          current_date=$(date +'%Y%m%d')
          completed=${{ needs.setup.outputs.completed }}
          image_tag="${current_date}.${completed}"
          echo "::set-output name=image_tag::${image_tag}"

      - name: Get semantic version
        id: semver
        run: echo "::set-output name=version::${{ steps.determine_image_tag.outputs.image_tag }}"

      - name: Login to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: kishorecr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

  build_backend:
    needs: setup
    runs-on: self-hosted
    if: github.event.inputs.image == 'all' || github.event.inputs.image == 'backend_code' || github.event_name == 'push' || github.event_name == 'repository_dispatch'
    steps:
      - name: Login to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: kishorecr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}  

      - name: Build and push Backend Docker image
        run: |
          docker build -t kishorecr.azurecr.io/albatroz-backend_code:${{ needs.setup.outputs.version }} -t kishorecr.azurecr.io/albatroz-backend_code:${{ steps.determine_image_tag.outputs.image_tag }} -t kishorecr.azurecr.io/albatroz-backend_code:latest ./backend_code
          docker push kishorecr.azurecr.io/albatroz-backend_code:${{ needs.setup.outputs.version }}
          docker push kishorecr.azurecr.io/albatroz-backend_code:${{ steps.determine_image_tag.outputs.image_tag }}
          docker push kishorecr.azurecr.io/albatroz-backend_code:latest

      - name: List Backend Docker image
        run: |
          echo "Backend Docker image:"
          docker images kishorecr.azurecr.io/albatroz-backend_code:${{ needs.setup.outputs.version }} --format "repository:tag: {{.Repository}}:{{.Tag}}"

  build_frontend:
    needs: setup
    runs-on: self-hosted
    if: github.event.inputs.image == 'all' || github.event.inputs.image == 'frontend_code' || github.event_name == 'push' || github.event_name == 'repository_dispatch'
    steps:
      - name: Login to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: kishorecr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }} 
      - name: Build and push Frontend Docker image
        run: |
          docker build -t kishorecr.azurecr.io/albatroz-frontend_code:${{ needs.setup.outputs.version }} -t kishorecr.azurecr.io/albatroz-frontend_code:${{ steps.determine_image_tag.outputs.image_tag }} -t kishorecr.azurecr.io/albatroz-frontend_code:latest ./frontend_code
          docker push kishorecr.azurecr.io/albatroz-frontend_code:${{ needs.setup.outputs.version }}
          docker push kishorecr.azurecr.io/albatroz-frontend_code:${{ steps.determine_image_tag.outputs.image_tag }}
          docker push kishorecr.azurecr.io/albatroz-frontend_code:latest
          
      - name: List Frontend Docker image
        run: |
          echo "Frontend Docker image:"
          docker images kishorecr.azurecr.io/albatroz-frontend_code:${{ needs.setup.outputs.version }} --format "repository:tag: {{.Repository}}:{{.Tag}}"

  build_nginx:
    needs: setup
    runs-on: self-hosted
    if: github.event.inputs.image == 'all' || github.event.inputs.image == 'nginx' || github.event_name == 'push' || github.event_name == 'repository_dispatch'
    steps:
      - name: Login to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: kishorecr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }} 

      - name: Build and push Nginx Docker image
        run: |
          docker build -t kishorecr.azurecr.io/albatroz-nginx:${{ needs.setup.outputs.version }} -t kishorecr.azurecr.io/albatroz-nginx:${{ steps.determine_image_tag.outputs.image_tag }} -t kishorecr.azurecr.io/albatroz-nginx:latest ./nginx
          docker push kishorecr.azurecr.io/albatroz-nginx:${{ needs.setup.outputs.version }}
          docker push kishorecr.azurecr.io/albatroz-nginx:${{ steps.determine_image_tag.outputs.image_tag }}
          docker push kishorecr.azurecr.io/albatroz-nginx:latest

      - name: List Nginx Docker image
        run: |
          echo "Nginx Docker image:"
          docker images kishorecr.azurecr.io/albatroz-nginx:${{ needs.setup.outputs.version }} --format "repository:tag: {{.Repository}}:{{.Tag}}"

  build_nginx_proxy:
    needs: setup
    runs-on: self-hosted
    if: github.event.inputs.image == 'all' || github.event.inputs.image == 'nginx-proxy' || github.event_name == 'push' || github.event_name == 'repository_dispatch'
    steps:
      - name: Login to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: kishorecr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }} 

      - name: Build and push Nginx Proxy Docker image
        run: |
          docker build -t kishorecr.azurecr.io/albatroz-nginx-proxy:${{ needs.setup.outputs.version }} -t kishorecr.azurecr.io/albatroz-nginx-proxy:${{ steps.determine_image_tag.outputs.image_tag }} -t kishorecr.azurecr.io/albatroz-nginx-proxy:latest ./nginx-proxy
          docker push kishorecr.azurecr.io/albatroz-nginx-proxy:${{ needs.setup.outputs.version }}
          docker push kishorecr.azurecr.io/albatroz-nginx-proxy:${{ steps.determine_image_tag.outputs.image_tag }}
          docker push kishorecr.azurecr.io/albatroz-nginx-proxy:latest

      - name: List Nginx Proxy Docker image
        run: |
          echo "Nginx Proxy Docker image:"
          docker images kishorecr.azurecr.io/albatroz-nginx-proxy:${{ needs.setup.outputs.version }} --format "repository:tag: {{.Repository}}:{{.Tag}}"

  build_letsencrypt:
    needs: setup
    runs-on: self-hosted
    if: github.event.inputs.image == 'all' || github.event.inputs.image == 'letsencrypt' || github.event_name == 'push' || github.event_name == 'repository_dispatch'
    steps:
      - name: Login to Azure Container Registry
        uses: docker/login-action@v1
        with:
          registry: kishorecr.azurecr.io
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }} 

      - name: Build and push LetsEncrypt Docker image
        run: |
          docker build -t kishorecr.azurecr.io/albatroz-letsencrypt:${{ needs.setup.outputs.version }} -t kishorecr.azurecr.io/albatroz-letsencrypt:${{ steps.determine_image_tag.outputs.image_tag }} -t kishorecr.azurecr.io/albatroz-letsencrypt:latest ./letsencrypt
          docker push kishorecr.azurecr.io/albatroz-letsencrypt:${{ needs.setup.outputs.version }}
          docker push kishorecr.azurecr.io/albatroz-letsencrypt:${{ steps.determine_image_tag.outputs.image_tag }}
          docker push kishorecr.azurecr.io/albatroz-letsencrypt:latest

      - name: List LetsEncrypt Docker image
        run: |
          echo "LetsEncrypt Docker image:"
          docker images kishorecr.azurecr.io/albatroz-letsencrypt:${{ needs.setup.outputs.version }} --format "repository:tag: {{.Repository}}:{{.Tag}}"
